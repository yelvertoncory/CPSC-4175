##HW1

1.IT Organizations involved into disputes,Functionality or performance of the software as deliverred did not measure up to the claims of the software developers,Promised Delivery date slipped many times, Faults are so severe software is unusable.
2.software life cycle refers to the phases of life for that particular piece of software. Software Development cycle is more abstract, and is typically when you start factoring in different methodologies. 
3.Perfective Maintenance vs Adaptive Maintenance is the difference is enhancing features vs fixing hardware/OS compatibility issues. Perfective would be adding a new button to a web page, and adaptive would be updating drivers for a new OS.
4.Hardware, like anything physical, typically worsens over time because of use. This is likely because of friction or just simply the laws of physics. That's why your GPU has a limited life. Software grows better because as a userbase grows the software company can release patches to fix bugs that have been reported or to add more functionality.
5.It highlights a few things for me. First, after implementation your user group grows and they likely find use cases that you didn't think of. Secondly, it highlights the importance of internal testing/planning prior to implementation.
6. Quite simply you should be testing, planning, and documentation should take place in each phase of the software development cycle.
7. If I understand the book correctly, it appears that structured programming techniques are either attribute or operational oriented where as object oriented techiniques are both. So in essence the latter simply builds a bridge between the two extremes of the structured paridigm.
8. I tend to think the developer should interact with the client during the initial design phase, but have a continious feedback loop with the users. This is because you are designeding hte software initially to meet the requirements of the client, but all the suggestions/bugs will be found by the users. 
9. I would say stay involved with a technology centric only community. Play with new technologies that come out whether that includes programming languages or tools.
10."You often don't understand the problem until after the first time you implement a solution" really rings a bell with me. That sentence sets a framework for an agile style of development, and a good perspective to have as a developer. The bazaar approach to users seems a lot better than a cathedral one. In a sense you groom your users to give you feedback you need to make changes, and lower the boom for when you release things. I come from a servant leadership background, and it sounds like management of a bazaar centric development team is similiar. Empower your team, protect them from outside distractions, establish a clear vision, etc all belong to servant leadership as well.